// Декілька лайфхаків при роботі з масивами.

//     Як швидко очистити масив

// const fruits = ['banana', 'apple', 'orange', 'watermelon', 'apple', 'orange', 'grape', 'apple'];
// fruits.length = 0;
// console.log(fruits); // поверне []

//     Як об'єднати більше двох масивів

// const fruits = ['apple', 'banana', 'orange'];
// const meat = ['poultry', 'beef', 'fish'];
// const vegetables = ['potato', 'tomato', 'cucumber'];
// const food = [...fruits, ...meat, ...vegetables];
// console.log(food); // поверне ["apple", "banana", "orange", "poultry", "beef", "fish", "potato", "tomato", "cucumber"]

//     Як отримати рандомне значення масиву

// const fruits = [ 'banana', 'apple', 'orange', 'watermelon', 'apple', 'orange', 'grape', 'apple', ];
// const randomFruit = fruits[Math.floor(Math.random() * fruits.length)];
// console.log(randomFruit); // поверне рандомний фрукт із масиву

// Шпаргалка з оголошення функцій у JS:

//     Функціональний вираз (function expression)

// const greet = function (name) {
//  return `Hello, ${name}`;
// };

//     Оголошення функції (function declaration)

// function greet(name) {
//  return `Hello, ${name}!`;
// }

//     Для того, щоб щось повернути з функції/методу або умови, можна використовувати оператор return.

// Також з функції можна повертати відразу будь-який тип даних, наприклад return 'hello' // (повернемо рядок)
// чи return true // (повернемо буль) чи return [1, 2] // (повернемо масив)

//     Паттерн раннє повернення каже про те, що якщо умова всередині нашого if поверне true, то нам одразу же

// треба щось повернути із тіла цієї умови, з допомогою return.

//     Не забувайте, що оператор = це оператор присвоєння, а не порівняння.

// Выбор правильного имени переменной - это
// важный аспект написания чистого и понятного кода.
//  Вот несколько советов по выбору имен переменных:

//     Описательность:
//     Имя переменной должно отражать суть хранимых
//      данных или выполняемой операции.
//      Избегайте слишком общих имен, таких как data
//       или temp, и предпочитайте более конкретные.

//     Используйте camelCase:
//     Стандартное соглашение для имен переменных в
// JavaScript - это camelCase,
//     где каждое слово, кроме первого, начинается с
//      заглавной буквы.
//          Например, myVariable, totalAmount,
//          calculateTotal.

//     Избегайте слишком коротких имен:
//     Избегайте использования слишком коротких имен,
//     таких как x или y,
//     если они не очевидны в контексте.Дайте переменной
//      описательное имя.

//     Избегайте однобуквенных имен:
//     В основном используйте более длинные имена переменных,
//     чтобы сделать код более читаемым.
//     Исключение может быть сделано для счетчиков циклов,
//     таких как i в for цикле.

//     Избегайте зарезервированных слов:
//     Не используйте зарезервированные слова в
//     качестве имен
// переменных(например, if, else, function и т.д.).

//     Консистентность:
//     Поддерживайте стиль именования по всему
//      вашему коду.
//      Если вы начали использовать camelCase,
//     придерживайтесь этого стиля.

// Пример хороших имен переменных:

// javascript

// let totalPrice = 100;
// let numberOfItems = 5;
// let userName = "JohnDoe";
// let isValidInput = true;

// Выбор хороших имен переменных делает код более
// читаемым
// и облегчает его понимание другими разработчиками
//     (и вам самим в будущем).
